// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package users

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByStatus = `-- name: CountUsersByStatus :one
SELECT COUNT(*) FROM users WHERE status = $1
`

func (q *Queries) CountUsersByStatus(ctx context.Context, status NullUserStatus) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    phone_number,
    pin,
    pin_changed_at,
    status,
    last_prompt_action,
    phone_verified,
    telco,
    last_login
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin
`

type CreateUserParams struct {
	PhoneNumber      string             `json:"phone_number"`
	Pin              string             `json:"pin"`
	PinChangedAt     pgtype.Timestamp   `json:"pin_changed_at"`
	Status           NullUserStatus     `json:"status"`
	LastPromptAction NullUserPromptType `json:"last_prompt_action"`
	PhoneVerified    pgtype.Bool        `json:"phone_verified"`
	Telco            string             `json:"telco"`
	LastLogin        pgtype.Timestamp   `json:"last_login"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.PhoneNumber,
		arg.Pin,
		arg.PinChangedAt,
		arg.Status,
		arg.LastPromptAction,
		arg.PhoneVerified,
		arg.Telco,
		arg.LastLogin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const createUserPrompt = `-- name: CreateUserPrompt :one
INSERT INTO user_prompts (
    user_id,
    action
) VALUES (
    $1, $2
) RETURNING id, user_id, action, performed_at
`

type CreateUserPromptParams struct {
	UserID int64          `json:"user_id"`
	Action UserPromptType `json:"action"`
}

func (q *Queries) CreateUserPrompt(ctx context.Context, arg CreateUserPromptParams) (UserPrompt, error) {
	row := q.db.QueryRow(ctx, createUserPrompt, arg.UserID, arg.Action)
	var i UserPrompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.PerformedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getRecentUserPrompts = `-- name: GetRecentUserPrompts :many
SELECT id, user_id, action, performed_at FROM user_prompts 
WHERE user_id = $1 
ORDER BY performed_at DESC 
LIMIT $2
`

type GetRecentUserPromptsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetRecentUserPrompts(ctx context.Context, arg GetRecentUserPromptsParams) ([]UserPrompt, error) {
	rows, err := q.db.Query(ctx, getRecentUserPrompts, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPrompt
	for rows.Next() {
		var i UserPrompt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.PerformedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const getUserByPublicID = `-- name: GetUserByPublicID :one
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users WHERE public_id = $1
`

func (q *Queries) GetUserByPublicID(ctx context.Context, publicID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPublicID, publicID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const getUserPrompts = `-- name: GetUserPrompts :many
SELECT id, user_id, action, performed_at FROM user_prompts 
WHERE user_id = $1 
ORDER BY performed_at DESC
`

func (q *Queries) GetUserPrompts(ctx context.Context, userID int64) ([]UserPrompt, error) {
	rows, err := q.db.Query(ctx, getUserPrompts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPrompt
	for rows.Next() {
		var i UserPrompt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.PerformedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPromptsByAction = `-- name: GetUserPromptsByAction :many
SELECT id, user_id, action, performed_at FROM user_prompts 
WHERE user_id = $1 AND action = $2 
ORDER BY performed_at DESC
`

type GetUserPromptsByActionParams struct {
	UserID int64          `json:"user_id"`
	Action UserPromptType `json:"action"`
}

func (q *Queries) GetUserPromptsByAction(ctx context.Context, arg GetUserPromptsByActionParams) ([]UserPrompt, error) {
	rows, err := q.db.Query(ctx, getUserPromptsByAction, arg.UserID, arg.Action)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPrompt
	for rows.Next() {
		var i UserPrompt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.PerformedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithPrompts = `-- name: GetUserWithPrompts :many
SELECT 
    u.id, u.public_id, u.phone_number, u.pin, u.first_name, u.last_name, u.pin_changed_at, u.status, u.last_prompt_action, u.phone_verified, u.telco, u.created_at, u.last_login, u.confirm_pin,
    up.id as prompt_id,
    up.action as prompt_action,
    up.performed_at as prompt_performed_at
FROM users u
LEFT JOIN user_prompts up ON u.id = up.user_id
WHERE u.id = $1
ORDER BY up.performed_at DESC
`

type GetUserWithPromptsRow struct {
	ID                int64              `json:"id"`
	PublicID          pgtype.UUID        `json:"public_id"`
	PhoneNumber       string             `json:"phone_number"`
	Pin               string             `json:"pin"`
	FirstName         string             `json:"first_name"`
	LastName          string             `json:"last_name"`
	PinChangedAt      pgtype.Timestamp   `json:"pin_changed_at"`
	Status            NullUserStatus     `json:"status"`
	LastPromptAction  NullUserPromptType `json:"last_prompt_action"`
	PhoneVerified     pgtype.Bool        `json:"phone_verified"`
	Telco             string             `json:"telco"`
	CreatedAt         pgtype.Timestamp   `json:"created_at"`
	LastLogin         pgtype.Timestamp   `json:"last_login"`
	ConfirmPin        string             `json:"confirm_pin"`
	PromptID          pgtype.Int8        `json:"prompt_id"`
	PromptAction      NullUserPromptType `json:"prompt_action"`
	PromptPerformedAt pgtype.Timestamp   `json:"prompt_performed_at"`
}

func (q *Queries) GetUserWithPrompts(ctx context.Context, id int64) ([]GetUserWithPromptsRow, error) {
	rows, err := q.db.Query(ctx, getUserWithPrompts, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserWithPromptsRow
	for rows.Next() {
		var i GetUserWithPromptsRow
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
			&i.PromptID,
			&i.PromptAction,
			&i.PromptPerformedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByLastLoginRange = `-- name: GetUsersByLastLoginRange :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
WHERE last_login BETWEEN $1 AND $2 
ORDER BY last_login DESC
`

type GetUsersByLastLoginRangeParams struct {
	LastLogin   pgtype.Timestamp `json:"last_login"`
	LastLogin_2 pgtype.Timestamp `json:"last_login_2"`
}

func (q *Queries) GetUsersByLastLoginRange(ctx context.Context, arg GetUsersByLastLoginRangeParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByLastLoginRange, arg.LastLogin, arg.LastLogin_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByPINChangedAfter = `-- name: GetUsersByPINChangedAfter :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
WHERE pin_changed_at > $1 
ORDER BY pin_changed_at DESC
`

func (q *Queries) GetUsersByPINChangedAfter(ctx context.Context, pinChangedAt pgtype.Timestamp) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByPINChangedAfter, pinChangedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByPhoneVerified = `-- name: GetUsersByPhoneVerified :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
WHERE phone_verified = $1 
ORDER BY created_at DESC
`

func (q *Queries) GetUsersByPhoneVerified(ctx context.Context, phoneVerified pgtype.Bool) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByPhoneVerified, phoneVerified)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByTelco = `-- name: GetUsersByTelco :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
WHERE telco = $1 
ORDER BY created_at DESC
`

func (q *Queries) GetUsersByTelco(ctx context.Context, telco string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByTelco, telco)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCreatedBetween = `-- name: GetUsersCreatedBetween :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
WHERE created_at BETWEEN $1 AND $2 
ORDER BY created_at DESC
`

type GetUsersCreatedBetweenParams struct {
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	CreatedAt_2 pgtype.Timestamp `json:"created_at_2"`
}

func (q *Queries) GetUsersCreatedBetween(ctx context.Context, arg GetUsersCreatedBetweenParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersCreatedBetween, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveUsers = `-- name: ListActiveUsers :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
WHERE status = 'active' 
ORDER BY created_at DESC
`

func (q *Queries) ListActiveUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listActiveUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByStatus = `-- name: ListUsersByStatus :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
WHERE status = $1 
ORDER BY created_at DESC
`

func (q *Queries) ListUsersByStatus(ctx context.Context, status NullUserStatus) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsersByPhoneNumber = `-- name: SearchUsersByPhoneNumber :many
SELECT id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin FROM users 
WHERE phone_number LIKE $1 
ORDER BY created_at DESC
`

func (q *Queries) SearchUsersByPhoneNumber(ctx context.Context, phoneNumber string) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUsersByPhoneNumber, phoneNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.PhoneNumber,
			&i.Pin,
			&i.FirstName,
			&i.LastName,
			&i.PinChangedAt,
			&i.Status,
			&i.LastPromptAction,
			&i.PhoneVerified,
			&i.Telco,
			&i.CreatedAt,
			&i.LastLogin,
			&i.ConfirmPin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastLogin = `-- name: UpdateLastLogin :one
UPDATE users 
SET last_login = $2
WHERE id = $1 
RETURNING id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin
`

type UpdateLastLoginParams struct {
	ID        int64            `json:"id"`
	LastLogin pgtype.Timestamp `json:"last_login"`
}

func (q *Queries) UpdateLastLogin(ctx context.Context, arg UpdateLastLoginParams) (User, error) {
	row := q.db.QueryRow(ctx, updateLastLogin, arg.ID, arg.LastLogin)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const updateLastPromptAction = `-- name: UpdateLastPromptAction :one
UPDATE users 
SET last_prompt_action = $2
WHERE id = $1 
RETURNING id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin
`

type UpdateLastPromptActionParams struct {
	ID               int64              `json:"id"`
	LastPromptAction NullUserPromptType `json:"last_prompt_action"`
}

func (q *Queries) UpdateLastPromptAction(ctx context.Context, arg UpdateLastPromptActionParams) (User, error) {
	row := q.db.QueryRow(ctx, updateLastPromptAction, arg.ID, arg.LastPromptAction)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const updatePhoneVerification = `-- name: UpdatePhoneVerification :one
UPDATE users 
SET phone_verified = $2
WHERE id = $1 
RETURNING id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin
`

type UpdatePhoneVerificationParams struct {
	ID            int64       `json:"id"`
	PhoneVerified pgtype.Bool `json:"phone_verified"`
}

func (q *Queries) UpdatePhoneVerification(ctx context.Context, arg UpdatePhoneVerificationParams) (User, error) {
	row := q.db.QueryRow(ctx, updatePhoneVerification, arg.ID, arg.PhoneVerified)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const updateUserComprehensive = `-- name: UpdateUserComprehensive :one
UPDATE users 
SET 
    phone_number = COALESCE($2, phone_number),
    pin = COALESCE($3, pin),
    pin_changed_at = COALESCE($4, pin_changed_at),
    status = COALESCE($5, status),
    last_prompt_action = COALESCE($6, last_prompt_action),
    phone_verified = COALESCE($7, phone_verified),
    telco = COALESCE($8, telco),
    last_login = COALESCE($9, last_login)
WHERE id = $1 
RETURNING id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin
`

type UpdateUserComprehensiveParams struct {
	ID               int64              `json:"id"`
	PhoneNumber      string             `json:"phone_number"`
	Pin              string             `json:"pin"`
	PinChangedAt     pgtype.Timestamp   `json:"pin_changed_at"`
	Status           NullUserStatus     `json:"status"`
	LastPromptAction NullUserPromptType `json:"last_prompt_action"`
	PhoneVerified    pgtype.Bool        `json:"phone_verified"`
	Telco            string             `json:"telco"`
	LastLogin        pgtype.Timestamp   `json:"last_login"`
}

func (q *Queries) UpdateUserComprehensive(ctx context.Context, arg UpdateUserComprehensiveParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserComprehensive,
		arg.ID,
		arg.PhoneNumber,
		arg.Pin,
		arg.PinChangedAt,
		arg.Status,
		arg.LastPromptAction,
		arg.PhoneVerified,
		arg.Telco,
		arg.LastLogin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const updateUserPIN = `-- name: UpdateUserPIN :one
UPDATE users 
SET pin = $2, 
    pin_changed_at = $3
WHERE id = $1 
RETURNING id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin
`

type UpdateUserPINParams struct {
	ID           int64            `json:"id"`
	Pin          string           `json:"pin"`
	PinChangedAt pgtype.Timestamp `json:"pin_changed_at"`
}

func (q *Queries) UpdateUserPIN(ctx context.Context, arg UpdateUserPINParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPIN, arg.ID, arg.Pin, arg.PinChangedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const updateUserStatus = `-- name: UpdateUserStatus :one
UPDATE users 
SET status = $2, 
    last_login = COALESCE($3, last_login)
WHERE id = $1 
RETURNING id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin
`

type UpdateUserStatusParams struct {
	ID        int64            `json:"id"`
	Status    NullUserStatus   `json:"status"`
	LastLogin pgtype.Timestamp `json:"last_login"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserStatus, arg.ID, arg.Status, arg.LastLogin)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}

const updateUserTelco = `-- name: UpdateUserTelco :one
UPDATE users 
SET telco = $2
WHERE id = $1 
RETURNING id, public_id, phone_number, pin, first_name, last_name, pin_changed_at, status, last_prompt_action, phone_verified, telco, created_at, last_login, confirm_pin
`

type UpdateUserTelcoParams struct {
	ID    int64  `json:"id"`
	Telco string `json:"telco"`
}

func (q *Queries) UpdateUserTelco(ctx context.Context, arg UpdateUserTelcoParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserTelco, arg.ID, arg.Telco)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.PhoneNumber,
		&i.Pin,
		&i.FirstName,
		&i.LastName,
		&i.PinChangedAt,
		&i.Status,
		&i.LastPromptAction,
		&i.PhoneVerified,
		&i.Telco,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ConfirmPin,
	)
	return i, err
}
