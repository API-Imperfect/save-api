// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package users

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserPromptType string

const (
	UserPromptTypeChangePin         UserPromptType = "change_pin"
	UserPromptTypeChangePhoneNumber UserPromptType = "change_phone_number"
	UserPromptTypeResetPin          UserPromptType = "reset_pin"
)

func (e *UserPromptType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserPromptType(s)
	case string:
		*e = UserPromptType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserPromptType: %T", src)
	}
	return nil
}

type NullUserPromptType struct {
	UserPromptType UserPromptType `json:"user_prompt_type"`
	Valid          bool           `json:"valid"` // Valid is true if UserPromptType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserPromptType) Scan(value interface{}) error {
	if value == nil {
		ns.UserPromptType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserPromptType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserPromptType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserPromptType), nil
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "active"
	UserStatusInactive UserStatus = "inactive"
	UserStatusDeleted  UserStatus = "deleted"
	UserStatusBlocked  UserStatus = "blocked"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type User struct {
	ID           int64            `json:"id"`
	PublicID     pgtype.UUID      `json:"public_id"`
	PhoneNumber  string           `json:"phone_number"`
	Pin          string           `json:"pin"`
	FirstName    string           `json:"first_name"`
	LastName     string           `json:"last_name"`
	PinChangedAt pgtype.Timestamp `json:"pin_changed_at"`
	Status       NullUserStatus   `json:"status"`
	// most recent user prompt
	LastPromptAction NullUserPromptType `json:"last_prompt_action"`
	PhoneVerified    pgtype.Bool        `json:"phone_verified"`
	Telco            string             `json:"telco"`
	CreatedAt        pgtype.Timestamp   `json:"created_at"`
	LastLogin        pgtype.Timestamp   `json:"last_login"`
}

// Tracks all prompt-related user actions historically
type UserPrompt struct {
	ID          int64            `json:"id"`
	UserID      int64            `json:"user_id"`
	Action      UserPromptType   `json:"action"`
	PerformedAt pgtype.Timestamp `json:"performed_at"`
}
